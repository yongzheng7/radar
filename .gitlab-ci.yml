# This file is a template, and might need editing before it works on your project.
# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: openjdk:8-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "28"
  #ANDROID_COMPILE_SDK: "31"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "28.0.3"
  #ANDROID_BUILD_TOOLS: "31.0.0"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "7302050"

  #  ANDROID_NDK_VERSION: "19.2.5345600"
  ANDROID_NDK_VERSION: "21.3.6528147"

  QT_VERSION: "5.12.11"
  QT_TARGET_ARCH: "android_armv7"
  ANDROID_ABI: "armeabi-v7a"
  GIT_CLONE_PATH: "${CI_BUILDS_DIR}/radar-app"
  GIT_SUBMODULE_STRATEGY: "normal"
  CMAKE_VERSION: "3.18.1"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - apt-get --quiet install --yes make cmake python3-pip
  - pip3 install pipenv

  - git submodule update --init
  - pushd qt-downloader
  - pipenv run pipenv install
  - pipenv run ./qt-downloader --opensource linux android ${QT_VERSION} ${QT_TARGET_ARCH}
  - popd
  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_HOME
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/cmdline-tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "ndk;${ANDROID_NDK_VERSION}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "cmake;${CMAKE_VERSION}"

  # Not necessary, but just for surity
  #- chmod +x ./gradlew

# Run build script      
assembleDebug:
  interruptible: true
  stage: build
  script:
    - export ANDROID_NDK=${ANDROID_HOME}/ndk/${ANDROID_NDK_VERSION}
    - export ANDROID_NDK_ROOT=${ANDROID_NDK}
    - export ANDROID_SDK_ROOT=${ANDROID_HOME}
    - export ANDROID_SDK=${ANDROID_SDK_ROOT}
    - export QT_BASE=${GIT_CLONE_PATH}/qt-downloader/${QT_VERSION}/${QT_TARGET_ARCH}
    - export CMAKE=${ANDROID_HOME}/cmake/${CMAKE_VERSION}/bin/cmake
    - mkdir ${CI_BUILDS_DIR}/build-android
    - pushd ${CI_BUILDS_DIR}/build-android
    - ${CMAKE} -DCMAKE_TOOLCHAIN_FILE="${ANDROID_NDK}/build/cmake/android.toolchain.cmake" -DANDROID_ABI=${ANDROID_ABI} -DCMAKE_PREFIX_PATH:PATH="${QT_BASE}/lib" -DCMAKE_FIND_ROOT_PATH="${QT_BASE}/" ${GIT_CLONE_PATH}
    - ${CMAKE} --build . -- -j $(nproc)
    - popd
  artifacts:
    paths:
      - ${CI_BUILDS_DIR}/build-android/radar-app-armeabi-v7a/build/outputs/apk/debug/radar-app-armeabi-v7a-debug.apk

